ПРИЛОЖЕНИЕ Г. СТРУКТУРНАЯ СХЕМА
АННОТАЦИЯ
В данном программном документе представлено руководство пользователя мобильного приложения для чтения книг «Bookworm».
В разделе «Структурная схема» описана структурная схема приложения, иллюстрирующая его архитектуру и взаимосвязи между основными компонентами.
 
1.	СТРУКТУРНАЯ СХЕМА
На рисунке 1 представлена структурная схема мобильного приложения.
 
Рисунок 1 – Структурная схема приложения

Архитектура приложения «Bookworm» построена на основе классической модели MVC (Model-View-Controller) с элементами современного подхода к разработке мобильных приложений. Структурный паттерн проектирования, используемый в приложении, обеспечивает четкое разделение графического интерфейса (View), бизнес-логики (Controller) и данных (Model), что позволяет достичь высокой модульности, масштабируемости и удобства сопровождения кода.

Пользовательский слой (View) представлен набором активностей (Activities) и фрагментов (Fragments), которые отвечают за отображение информации и взаимодействие с пользователем. Активности представляют собой полноценные экраны приложения, такие как экран входа (SignInActivity), экран детальной информации о книге (BookActivity) и экран чтения (BookReaderActivity). Фрагменты используются для реализации отдельных функциональных блоков внутри главного экрана приложения, доступ к которым осуществляется через нижнюю навигационную панель. Такой подход обеспечивает гибкость интерфейса и возможность его адаптации под различные размеры экранов и ориентации устройства.

Слой бизнес-логики (Controller) содержит компоненты, ответственные за обработку пользовательских действий, маршрутизацию между экранами и координацию потоков данных. Этот слой реализует основную логику приложения, включая алгоритмы отображения книг, обработку жестов при чтении, сортировку и фильтрацию книг в библиотеке. Для взаимодействия между компонентами используется принцип событий и состояний, при котором изменения в моделях данных автоматически отражаются в пользовательском интерфейсе.

Особую роль в приложении играет сервисный слой, который обеспечивает взаимодействие с внешними системами и предоставляет высокоуровневые API для работы с данными. Ключевыми компонентами этого слоя являются SupabaseAuth, отвечающий за аутентификацию и авторизацию пользователей, и SupabaseService, предоставляющий методы для работы с базой данных. Сервисный слой инкапсулирует детали взаимодействия с удаленными серверами, обработку ошибок сети и кэширование данных.

Архитектура доменного уровня организована через сервисы, которые напрямую взаимодействуют с базой данных Supabase. Основная задача сервисов заключается в формировании и отправке запросов к Supabase API, обработке полученных ответов и преобразовании данных из формата JSON в объекты Java, которые затем используются другими компонентами приложения. Такой подход позволяет изолировать логику работы с сетью и базой данных от остальной части приложения, что упрощает тестирование и обеспечивает возможность замены источника данных без изменения бизнес-логики.

Слой данных (Model) представлен набором классов-моделей, таких как Book, Quote, Shelf и TocItem, которые определяют структуру данных, используемых в приложении. Эти классы инкапсулируют информацию о книгах, цитатах, полках и элементах оглавления, предоставляя методы для доступа к данным и их модификации. Модели данных также содержат логику валидации и преобразования данных, что обеспечивает целостность информации, хранящейся в приложении.

Репозиторный слой реализует паттерн Repository, который обеспечивает абстрактный интерфейс для работы с данными, скрывая детали их хранения и получения. Репозитории отвечают за кэширование данных и обеспечение доступа к информации даже в условиях отсутствия подключения к сети. Они также реализуют логику синхронизации локальных данных с удаленным сервером, что позволяет пользователю работать с приложением в офлайн-режиме с последующей синхронизацией изменений при появлении подключения к интернету.

Потоки данных в приложении организованы следующим образом: пользовательские действия, такие как нажатие на книгу в библиотеке или перелистывание страницы, перехватываются компонентами пользовательского интерфейса и передаются в слой бизнес-логики. Компоненты этого слоя анализируют действия, принимают решения о необходимой реакции и при необходимости обращаются к репозиториям для получения или изменения данных. Репозитории, в свою очередь, используют сервисы для взаимодействия с удаленным сервером или работы с локальным хранилищем. Полученные или измененные данные передаются обратно через слой бизнес-логики в компоненты пользовательского интерфейса, которые обновляют отображаемую информацию.

Такая многослойная архитектура обеспечивает высокую степень модульности и независимости компонентов, что упрощает разработку, тестирование и поддержку приложения. Она также позволяет эффективно распределить ответственность между разработчиками, работающими над различными аспектами системы, и обеспечивает возможность параллельной разработки различных компонентов.

Внешние сервисы, такие как Supabase Database, Supabase Storage и Supabase Authentication, предоставляют инфраструктуру для хранения и управления данными, загрузки и скачивания файлов, а также обеспечения безопасного доступа к системе. Использование Supabase в качестве бэкенд-платформы позволяет значительно ускорить разработку за счет использования готовых высокоуровневых API и инструментов для управления данными.

Структурная схема приложения «Bookworm» иллюстрирует, как различные активности и фрагменты взаимодействуют друг с другом, обеспечивая пользователю удобный доступ к библиотеке книг, функциям чтения и управления книжными полками. Например, когда пользователь выбирает книгу в LibraryFragment, происходит запуск BookActivity, которая отображает детальную информацию о книге. При нажатии на кнопку "Читать" в BookActivity запускается BookReaderActivity, обеспечивающая функционал чтения. Аналогично, при выборе полки в ShelvesFragment открывается ShelfDetailActivity, отображающая содержимое выбранной полки.

Особое внимание при проектировании архитектуры было уделено производительности и отзывчивости пользовательского интерфейса. Для обеспечения плавной работы приложения используются асинхронные операции при взаимодействии с сетью и базой данных, а также эффективные алгоритмы рендеринга текста в режиме чтения. Кэширование данных на различных уровнях архитектуры позволяет минимизировать количество сетевых запросов и обеспечить быстрый доступ к часто используемой информации.

Безопасность данных обеспечивается на нескольких уровнях: на уровне аутентификации через SupabaseAuth с использованием токенов доступа, на уровне передачи данных с использованием защищенного HTTPS-соединения, и на уровне доступа к данным с использованием системы разрешений Supabase. Такой многоуровневый подход к безопасности гарантирует защиту персональных данных пользователей и их книжных коллекций.

Схема представлена также в табличном виде, в таблице 1.
Таблица 1 – Описание структурной схемы мобильного приложения
№	Наименование модуля	Описание
1	MainActivity.java	Главный экран приложения с навигацией. Содержит четыре основных раздела (Домашняя страница, Библиотека, Полки, Профиль), доступных через нижнюю навигационную панель. Обеспечивает переключение между фрагментами и хранит общее состояние приложения. Также отвечает за инициализацию необходимых сервисов и компонентов при запуске приложения.
2	SignInActivity.java	Экран авторизации пользователя. Обрабатывает процесс входа в приложение через Supabase Auth. Предоставляет поля для ввода email и пароля, валидирует введенные данные и отправляет запрос на авторизацию. При успешной авторизации сохраняет токен доступа и перенаправляет пользователя на главный экран.
3	SingUpActivity.java	Экран регистрации. Позволяет создать новый аккаунт пользователя в системе Supabase. Включает поля для ввода персональных данных, email и пароля, проверяет корректность и уникальность введенной информации и создает новую учетную запись. После успешной регистрации автоматически выполняет вход в приложение.
4	BookActivity.java	Детальная информация о книге. Отображает данные о книге, включая обложку, название, автора, прогресс чтения, рейтинг и отзывы. Предоставляет кнопки для начала чтения, редактирования информации о книге и добавления книги на полку. Также отображает статистику чтения для конкретной книги.
5	BookReaderActivity.java	Экран чтения электронной книги. Основной интерфейс для чтения с функциями перелистывания страниц, закладок и навигации по главам. Поддерживает различные форматы электронных книг, настройки шрифта, яркости и цветовой схемы. Автоматически сохраняет прогресс чтения и синхронизирует его с базой данных.
6	AddBookActivity.java	Форма добавления новой книги в библиотеку. Позволяет указать название, автора, загрузить файл книги и обложку. Поддерживает сканирование штрих-кода для автоматического заполнения информации о книге. Также позволяет указать дополнительные метаданные, такие как жанр, год издания и описание.
7	EditBookActivity.java	Редактирование информации о книге. Позволяет изменить метаданные книги, обновить статус чтения, выставить оценку и написать отзыв. Предоставляет возможность заменить файл книги или обложку. Включает функцию удаления книги из библиотеки с подтверждением действия.
8	ShelfDetailActivity.java	Просмотр содержимого книжной полки. Отображает все книги на выбранной полке с возможностью добавления и удаления книг. Позволяет редактировать название и описание полки, а также изменять порядок книг на полке. Отображает статистику по полке, такую как количество книг и средний прогресс чтения.
9	HomeFragment.java	Главная страница приложения. Показывает недавно прочитанные книги, рекомендации и статистику чтения. Предоставляет быстрый доступ к книгам, которые пользователь читает в настоящее время, с индикаторами прогресса. Также отображает информацию о достижениях и целях чтения.
10	LibraryFragment.java	Библиотека пользователя. Отображает все книги с возможностью сортировки, поиска и фильтрации по различным параметрам, таким как автор, жанр, статус чтения и рейтинг. Поддерживает различные режимы отображения (сетка, список) и группировку книг по категориям.
11	ShelvesFragment.java	Управление книжными полками. Позволяет создавать, редактировать и удалять тематические полки для организации книг. Отображает список всех полок с количеством книг на каждой и предоставляет функции поиска и сортировки полок. Поддерживает возможность создания вложенных полок и автоматической организации книг.
12	ProfileFragment.java	Профиль пользователя. Содержит персональную информацию, настройки приложения и подробную статистику чтения. Позволяет изменить личные данные, настройки приватности и предпочтения в отношении пользовательского интерфейса. Отображает графики и диаграммы, иллюстрирующие читательские привычки и достижения.
13	SupabaseAuth.java	Сервис аутентификации. Обеспечивает безопасный вход, выход и управление токенами доступа через Supabase. Реализует функции регистрации, входа, восстановления пароля и управления сессией пользователя. Обрабатывает ошибки аутентификации и обеспечивает автоматическое обновление токенов доступа.
14	SupabaseService.java	Сервис работы с базой данных. Предоставляет методы для получения, добавления и обновления данных о книгах и полках в Supabase. Реализует функции синхронизации данных между локальным хранилищем и удаленным сервером. Обеспечивает обработку ошибок сети и механизмы повторных попыток при неудачном выполнении запросов.
15	Book.java	Модель данных книги. Хранит информацию о названии, авторе, пути к файлу, обложке, прогрессе чтения и оценке. Включает методы для расчета статистики чтения, такой как скорость чтения и ожидаемое время завершения. Поддерживает сериализацию для хранения в базе данных и восстановления из JSON.
16	Shelf.java	Модель данных книжной полки. Содержит название, описание и список книг на полке. Предоставляет методы для добавления, удаления и сортировки книг, а также для расчета агрегированной статистики по всем книгам на полке. Поддерживает сериализацию для хранения в базе данных и восстановления из JSON.
17	Quote.java	Модель данных цитаты из книги. Хранит текст цитаты, ссылку на книгу, страницу и дату добавления. Предоставляет методы для форматирования и отображения цитаты в различных контекстах, таких как социальные сети или экспорт в другие приложения.
18	TocItem.java	Модель данных элемента оглавления книги. Содержит название главы или раздела, уровень вложенности и позицию в книге. Используется для навигации по книге в режиме чтения и отображения структуры книги. Поддерживает иерархическую организацию для представления вложенных разделов. 